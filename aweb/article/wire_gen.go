// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/pluckhuang/goweb/aweb/article/events"
	"github.com/pluckhuang/goweb/aweb/article/grpc"
	"github.com/pluckhuang/goweb/aweb/article/ioc"
	"github.com/pluckhuang/goweb/aweb/article/repository"
	"github.com/pluckhuang/goweb/aweb/article/repository/cache"
	"github.com/pluckhuang/goweb/aweb/article/repository/dao"
	"github.com/pluckhuang/goweb/aweb/article/service"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	client := ioc.InitEtcdClient()
	db := ioc.InitDB(loggerV1)
	articleDAO := dao.NewArticleGORMDAO(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewArticleRedisCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDAO, articleCache, loggerV1)
	saramaClient := ioc.InitKafka()
	syncProducer := ioc.InitSyncProducer(saramaClient)
	producer := events.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, loggerV1)
	articleServiceServer := grpc.NewGrpcServer(articleService)
	server := ioc.InitGRPCxServer(loggerV1, client, articleServiceServer)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewArticleGORMDAO, cache.NewArticleRedisCache, repository.NewCachedArticleRepository, service.NewArticleService, grpc.NewGrpcServer)

var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitDB, ioc.InitEtcdClient, ioc.InitLogger, ioc.InitKafka, ioc.InitSyncProducer, events.NewSaramaSyncProducer)
